name: Django CI

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master", "develop" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libsm6 libxrender1 libxext6

    - name: Install Python dependencies
      working-directory: ./sorting_system
      run: |
        python -m pip install --upgrade pip
        # Install CPU version of PyTorch from PyTorch wheels
        pip install torch==2.0.1+cpu torchvision==0.15.2+cpu -f https://download.pytorch.org/whl/torch_stable.html
        # Create requirements file without torch dependencies
        cat requirements.txt | grep -v "torch" > requirements-ci.txt
        # Install remaining dependencies
        pip install -r requirements-ci.txt
        # Clean up
        rm requirements-ci.txt

    - name: Setup Django environment
      working-directory: ./sorting_system
      run: |
        # Create media directory if it doesn't exist
        mkdir -p media/uploads media/debug
        # Create .env file with required environment variables
        echo "SECRET_KEY=django-insecure-test-key-for-ci" > .env
        echo "DEBUG=True" >> .env
        echo "DATABASE_URL=sqlite:///db.sqlite3" >> .env

    - name: Verify LFS files
      working-directory: ./sorting_system
      run: |
        # Check if model files are properly downloaded (not pointer files)
        find . -name "*.pth" -o -name "*.pt" -o -name "*.h5" -o -name "*.onnx" -o -name "*.weights" | while read file; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
            echo "File: $file (Size: $size bytes)"
            if [ $size -lt 200 ]; then
              echo "WARNING: $file appears to be a pointer file (too small)"
              head -c 100 "$file"
              echo ""
            fi
          fi
        done

    - name: Check Django configuration
      working-directory: ./sorting_system
      run: |
        python manage.py check

    - name: Run Django migrations
      working-directory: ./sorting_system
      run: |
        python manage.py migrate

    - name: Run tests
      working-directory: ./sorting_system
      run: |
        python manage.py test
      env:
        SECRET_KEY: django-insecure-test-key-for-ci
        DEBUG: True
        DATABASE_URL: sqlite:///db.sqlite3