name: Sorting System CI/CD

on:
  push:
    branches: [ "main", "master", "develop", "ci" ]
  pull_request:
    branches: [ "main", "master", "develop", "ci" ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0 libsm6 libxrender1 libxext6

    - name: Install Python dependencies
      working-directory: ./sorting_system
      run: |
        python -m pip install --upgrade pip
        # Install CPU version of PyTorch first from PyTorch wheels
        pip install torch==2.0.1+cpu torchvision==0.15.2+cpu -f https://download.pytorch.org/whl/torch_stable.html
        # Create requirements file without torch dependencies
        cat requirements.txt | grep -v "torch" > requirements-ci.txt
        # Install remaining dependencies
        pip install -r requirements-ci.txt
        # Clean up
        rm requirements-ci.txt

    - name: Setup Django environment
      working-directory: ./sorting_system
      run: |
        # Create media directory if it doesn't exist
        mkdir -p media/uploads media/debug
        # Create .env file with required environment variables
        echo "SECRET_KEY=django-insecure-test-key-for-ci" > .env
        echo "DEBUG=True" >> .env

    - name: Check Django configuration
      working-directory: ./sorting_system
      run: |
        python manage.py check

    - name: Run Django migrations
      working-directory: ./sorting_system
      run: |
        python manage.py migrate

    - name: Run backend tests
      working-directory: ./sorting_system
      run: |
        python manage.py test
      env:
        SECRET_KEY: django-insecure-test-key-for-ci
        DEBUG: True

  frontend-test:
    runs-on: ubuntu-latest
    needs: backend-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: |
        npm test -- --watchAll=false

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js for frontend build
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build/

    - name: Set up Python for backend
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install backend dependencies
      working-directory: ./sorting_system
      run: |
        python -m pip install --upgrade pip
        # Install CPU version of PyTorch first from PyTorch wheels
        pip install torch==2.0.1+cpu torchvision==0.15.2+cpu -f https://download.pytorch.org/whl/torch_stable.html
        # Create requirements file without torch dependencies
        cat requirements.txt | grep -v "torch" > requirements-ci.txt
        # Install remaining dependencies
        pip install -r requirements-ci.txt
        # Clean up
        rm requirements-ci.txt

    - name: Prepare backend for deployment
      working-directory: ./sorting_system
      run: |
        # Any additional backend preparation steps
        echo "Backend prepared for deployment"

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-app
        path: |
          ./sorting_system/
          !./sorting_system/media/
          !./sorting_system/db.sqlite3
          !./sorting_system/venv/